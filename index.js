const { Telegraf, Markup } = require('telegraf')
require('dotenv').config()
const text = require('./const')

const bot = new Telegraf(process.env.BOT_TOKEN)


bot.start((ctx) => ctx.reply(`–ü—Ä–∏–≤–µ—Ç ${ctx.message.from.first_name ? ctx.message.from.first_name : "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"}` + text.start, Markup.keyboard([
  ["üë© –û–±–æ –º–Ω–µ", "‚úçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å"]
]).resize()))


//–ö–Ω–æ–ø–∫–∞ –ó–ê–ö–ê–ó–¢–¨
bot.hears('‚úçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å', async (ctx) => {
  try {
    await ctx.reply('–ï—Å–ª–∏ –í—ã –µ—â–µ –Ω–∏—á–µ–≥–æ —É –Ω–∞—Å –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏, —Ç–æ —É –Ω–∞—Å –¥–ª—è –≤–∞—Å –ø–æ–¥–∞—Ä–æ–∫ ü§© - 10 % —Å–∫–∏–¥–∫–∞ –Ω–∞ —Ñ–æ—Ä–º–∞—Ç –ê3 (30—Ö40 —Å–º) \r\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', Markup.inlineKeyboard(
      [Markup.button.url('–ù–∞–ø–∏—Å–∞—Ç—å', 'telegram.com')]))
  } catch (e) {
    console.error(e)
  }
})

//–∫–Ω–æ–ø–∫–∞ –û–ë–û –ú–ù–ï
bot.hears('üë© –û–±–æ –º–Ω–µ', async (ctx) => {
  try {
    await ctx.replyWithPhoto({
      source: 'img/portrait.jpg'
    }, {
      caption: text.author,
      parse_mode: "HTML",
      reply_markup: JSON.stringify({
        "inline_keyboard": [
          [
            Markup.button.url('–í–∫–æ–Ω—Ç–∞–∫—Ç–µ', 'vk.com'),
            Markup.button.url('Instagram', 'instagram.com'),
            Markup.button.url('Telegram', 'telegram.com')
          ]
        ]
      })
    }, {
      disable_web_page_preview: true
    })
  } catch (e) {
    console.error(e)
  }
})


//–û–¢–ó–´–í–´
bot.command('review', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/review/portrait.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btn_1')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }
})

bot.action('btn_1', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/review/1.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btn_2')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})
bot.action('btn_2', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/review/2.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btn_3')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})
bot.action('btn_3', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/review/3.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btn_4')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})
bot.action('btn_4', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/review/4.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btn_5')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})
bot.action('btn_5', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/review/5.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–í–Ω–∞—á–∞–ª–æ', 'btn_1')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})


//–¶–ï–ù–´

bot.command('price', async (ctx) => {
  try {
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã - —Å—Ä–µ–¥–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥—É, –∞ –∫–∞—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ –∏–∑ –ª—É—á—à–∏—Ö!</b>\r\n\r\n–§–æ—Ä–º–∞—Ç—ã:–ê4 (20—Ö30 —Å–º )- 3000 —Ä—É–±.\r\n–ê3 (30—Ö40 —Å–º) - 4000 —Ä—É–±,\r\n–ê2 (40—Ö50) - 5000 —Ä—É–±,\r\n–ê1 (50—Ö60 ) - 6000 —Ä—É–±\r\n\r\n<b>–î–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ–º–µ–π–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –≤–æ–∑–º–æ–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç –±–æ–ª—å—à–µ:</b>\r\n–ê0 (60—Ö80) - 7000 —Ä—É–±)\r\n\r\n–ê —Ç–∞–∫–∂–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –º–∞—Å–ª–æ–º.\r\n<b>–û—Ç 1–≥–æ –¥–Ω—è, –¥–∞–∂–µ –≤ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –∏ –≤—ã—Ö–æ–¥–Ω—ã–µ!</b>', Markup.inlineKeyboard(
      [
        [Markup.button.url('–ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!', 'telegram.com')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }
})

bot.action('zakaz', async (ctx) => {
  try {
    await ctx.replyWithHTML('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ç–µ–∫—Å—Ç', {
      disable_web_page_preview: true
    })
  } catch (e) {
    console.error(e)
  }

})

//–ü–û–†–¢–§–û–õ–ò–û
bot.command('portfolio', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/portfolio/1.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btnp_1')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }
})

bot.action('btnp_1', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/portfolio/2.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btnp_2')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})
bot.action('btnp_2', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/portfolio/3.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–°–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ', 'btnp_3')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})
bot.action('btnp_3', async (ctx) => {
  try {
    await ctx.replyWithPhoto({ source: './img/portfolio/4.jpg' })
    await ctx.replyWithHTML('<b>–¶–µ–Ω—ã</b>', Markup.inlineKeyboard(
      [
        [Markup.button.callback('–í–Ω–∞—á–∞–ª–æ', 'btnp_1')]
      ]
    ))
  } catch (e) {
    console.error(e)
  }

})




bot.help((ctx) => ctx.reply(text.commands))
bot.launch()

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))